# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2019-10-31 06:40
from __future__ import unicode_literals

from django.db import migrations

# This is a start
DATA = [('uom', 'Melbourne',
         [('uom', 'University of Melbourne',
           ['unimelb.edu.au'])]),
        ('qcif', 'QCIF',
         [('uq', 'University of Qieensland',
           ['uq.edu.au', 'uq.net']),
          ('qut', 'Queensland University of Technology',
           ['qut.edu.au']),
          ('jcu', 'James Cook University',
           ['jcu.edu.au']),
          ('cqu', 'CQUniversity',
           ['cqu.edu.au']),
          ('usc', 'University of the Sunshine Coast',
           ['usc.edu.au']),
          ('usq', 'University of Southern Queensland',
           ['usq.edu.au']),
          ('griffith', 'Griffith University',
           ['griffith.edu.au'])])]


def populate(apps, schema_editor):
    Site = apps.get_model('rcallocation', 'Site')
    Organization = apps.get_model('rcallocation', 'Organization')
    EmailDomain = apps.get_model('rcallocation', 'EmailDomain')

    for site_name, site_display, organizations in DATA:
        # Site objects may or may not have been pre-populated manually
        sites = Site.objects.filter(name=site_name)
        if sites.count() == 0:
            site = Site.objects.create(name=site_name,
                                       display_name=site_display,
                                       enabled=True)
        else:
            site = sites.first()
        for org_name, org_display, domains in organizations:
            org = Organization.objects.create(name=org_name,
                                              display_name=org_display,
                                              site=site)
            for domain_name in domains:
                domain = EmailDomain.objects.create(domain=domain_name,
                                                    organization=org)

def depopulate(apps, schema_editor):
    Organization = apps.get_model('rcallocation', 'Organization')
    EmailDomain = apps.get_model('rcallocation', 'EmailDomain')

    EmailDomain.objects.all().delete()
    Organization.objects.all().delete()
             

class Migration(migrations.Migration):

    dependencies = [
        ('rcallocation', '0037_add_organization_and_email_domain'),
    ]

    operations = [
        migrations.RunPython(populate, depopulate)
    ]
