# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2019-10-31 06:40
from __future__ import unicode_literals

from django.db import migrations

# Based on info in 'NodeMemberOrganizations' Wiki page ...
SITE_DATA = [('uom', 'Melbourne', True,
              [('uom', 'University of Melbourne',
                ['unimelb.edu.au'])]),
             ('qcif', 'QCIF', True,
              [('uq', 'University of Qieensland',
                ['uq.edu.au', 'uq.net']),
               ('qut', 'Queensland University of Technology',
                ['qut.edu.au']),
               ('jcu', 'James Cook University',
                ['jcu.edu.au']),
               ('cqu', 'CQUniversity',
                ['cqu.edu.au']),
               ('usc', 'University of the Sunshine Coast',
                ['usc.edu.au']),
               ('usq', 'University of Southern Queensland',
                ['usq.edu.au']),
               ('griffith', 'Griffith University',
                ['griffith.edu.au']),
               ('csiro',
                'Commonweath Scientific & Industrial Research Organisation',
                ['csiro.au']),
               ('qld-qov',
                'Queensland State Government Departments',
                ['qld.gov.au']),
               ]),
             ('monash', 'Monash', True,
              [('monash', 'Monash University',
                ['monash.edu'])]),
             ('nci', 'NCI', True,
              [('anu', 'Australian National University',
                ['anu.edu.au'])]),
             ('swinburne', 'Swinburne', True,
              [('swinburne', 'Swinburne University',
                ['swinburne.edu.au'])]),
             ('auckland', 'Auckland', True,
              [('auckland', 'University of Auckland',
                ['auckland.ac.nz'])]),
             ('tpac', 'TPAC', True,
              [('utas', 'University of Tasmania',
                ['utas.edu.au']),
               ('ace-crc',
                'Antarctic Climate & Ecosystems Cooperative Research Centre',
                ['acecrc.org.au']),
               ('csiro', '-', []),  # details previously defined
               ('bom', 'Bureau of Meteorology',
                ['bom.gov.au']),
               ('aad', 'Australian Antarctic Division',
                ['antarctic.gov.au']),
              ]),
             ('intersect', 'Intersect', True,
              [('acu', 'Australian Catholic University',
                ['acu.edu.au']),
               ('adelaide', 'University of Adelaide',
                ['adelaide.edu.au']),
               ('canberra', 'University of Canberra',
                ['canberra.edu.au']),
               ('csu', 'Charles Sturt University',
                ['csu.edu.au']),
               ('deakin', 'Deakin University',
                ['deakin.edu.au']),
               ('latrobe', 'La Trobe University',
                ['latrobe.edu.au']),
               ('newcastle', 'University of Newcastle',
                ['newcastle.edu.au']),
               ('scu', 'Southern Cross University',
                ['scu.edu.au']),
               ('sydney', 'Sydney University',
                ['sydney.edu.au']),
               ('une', 'University of New England',
                ['une.edu.au']),
               ('unsw', 'University of New South Wales',
                ['unsw.edu.au']),
               ('uts', 'University of Technology Sydney',
                ['uts.edu.au']),
               ('wsu', 'Western Sydney University',
                ['westernsydney.edu.au']),
               ('nsw-qov',
                'New South Wales State Government Departments',
                ['nsw.gov.au']),
               ('sax', 'Sax Institute',
                ['saxinstitute.org.au']),
               ('sirca', 'Sirca',
                ['sirca.org.au'])])
]

NON_SITE_DATA = [('uow', 'University of Wollongong',
                  ['uow.edu.au']),
                 ('vu', 'Victoria University',
                  ['vu.edu.au']),
                 ('uwa', 'University of Western Australia',
                  ['uwa.edu.au']),
                 ('curtin', 'Curtin University',
                  ['curtin.edu.au']),
                 ('ecu', 'Edith Cowan University',
                  ['ecu.edu.au']),
                 ('unisa.edu.au', 'University of South Australia',
                  ['unisa.edu.au']),
                 ('flinders', 'Flinders University',
                  ['flinders.edu.au']),
                 ('bond', 'Bond University',
                  ['bond.edu.au']),
]


def populate(apps, schema_editor):
    Site = apps.get_model('rcallocation', 'Site')
    Organization = apps.get_model('rcallocation', 'Organization')
    EmailDomain = apps.get_model('rcallocation', 'EmailDomain')

    for site_name, site_display, enabled, organizations in SITE_DATA:
        # Site objects may or may not have been pre-populated manually
        sites = Site.objects.filter(name=site_name)
        if sites.count() == 0:
            site = Site.objects.create(name=site_name,
                                       display_name=site_display,
                                       enabled=enabled)
        else:
            site = sites.first()
        for org_name, org_display, domains in organizations:
            # An Organization may be associated with multiple Sites
            # so we support backwards references
            orgs = Organization.objects.filter(name=org_name)
            if orgs.count() == 0:
                org = Organization.objects.create(name=org_name,
                                                  display_name=org_display)
                for domain_name in domains:
                    domain = EmailDomain.objects.create(domain=domain_name,
                                                        organization=org)
            else:
                org = orgs.first()
            org.site.add(site)
            org.save()

    for org_name, org_display, domains in NON_SITE_DATA:
        org = Organization.objects.create(name=org_name,
                                          display_name=org_display)
        for domain_name in domains:
            domain = EmailDomain.objects.create(domain=domain_name,
                                                organization=org)


def depopulate(apps, schema_editor):
    Organization = apps.get_model('rcallocation', 'Organization')
    EmailDomain = apps.get_model('rcallocation', 'EmailDomain')

    EmailDomain.objects.all().delete()
    Organization.objects.all().delete()
             

class Migration(migrations.Migration):

    dependencies = [
        ('rcallocation', '0037_add_organization_and_email_domain'),
    ]

    operations = [
        migrations.RunPython(populate, depopulate)
    ]
